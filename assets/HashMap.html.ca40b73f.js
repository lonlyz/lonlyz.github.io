import{_ as s,o as n,c as a,e as l}from"./app.2d179ac6.js";var p="/basic/hashmap/class.png";const e={},o=l('<h1 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> HashMap</h1><blockquote><p>\u57FA\u4E8E<strong>JDK1.8</strong>\u8FDB\u884C\u5206\u6790</p></blockquote><h2 id="\u7B80\u4ECB" tabindex="-1"><a class="header-anchor" href="#\u7B80\u4ECB" aria-hidden="true">#</a> \u7B80\u4ECB</h2><p>\u57FA\u4E8E\u54C8\u5E0C\u8868\u7684Map\u5B9E\u73B0\uFF0C\u4EE5key-value\u5B58\u50A8\u5F62\u5F0F\u5B58\u5728\uFF0C\u5141\u8BB8\u5B58\u50A8null\uFF0C\u4E0D\u4FDD\u8BC1\u540C\u6B65\u3002\u5E95\u5C42\u662F\u6570\u7EC4+\u94FE\u8868+\u7EA2\u9ED1\u6811\u6784\u6210\u3002</p><h2 id="\u7C7B\u56FE" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u56FE" aria-hidden="true">#</a> \u7C7B\u56FE</h2><p><img src="'+p+`" alt="\u7C7B\u56FE"></p><p>\u4ECE\u4E0A\u56FE\u53EF\u4EE5\u5F97\u77E5\uFF1A</p><ol><li>\u5B9E\u73B0Map\u63A5\u53E3(\u54C8\u5E0C\u8868\uFF0C\u4E5F\u79F0\u6563\u5217\u8868)\uFF0C\u5C06\u6570\u636E\u4EE5key-value\u7684\u5F62\u5F0F\u8FDB\u884C\u5B58\u50A8\uFF0C\u65B9\u4FBF\u6570\u636E\u7684\u67E5\u627E\u548C\u83B7\u53D6\u3002</li><li>\u5B9E\u73B0Cloneable\u63A5\u53E3\u53EF\u4EE5\u8FDB\u884C\u514B\u9686\u3002</li><li>\u5B9E\u73B0Serializable\u63A5\u53E3\u53EF\u4EE5\u8FDB\u884C\u5E8F\u5217\u5316\uFF0C\u8FDB\u884C\u5E8F\u5217\u5316\u4F20\u8F93\u3002</li></ol><h2 id="\u6E90\u7801\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801\u5206\u6790" aria-hidden="true">#</a> \u6E90\u7801\u5206\u6790</h2><ul><li><p>\u5C5E\u6027</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"> /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The default initial capacity - MUST be a power of two.</span></span>
<span class="line"><span style="color:#6A9955;">     * \u9ED8\u8BA4\u7684\u521D\u59CB\u5BB9\u91CF</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">DEFAULT_INITIAL_CAPACITY</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// aka 16</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The maximum capacity, used if a higher value is implicitly specified</span></span>
<span class="line"><span style="color:#6A9955;">     * by either of the constructors with arguments.</span></span>
<span class="line"><span style="color:#6A9955;">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span>
<span class="line"><span style="color:#6A9955;">     * \u6700\u5927\u7684\u5BB9\u91CF\u503C\uFF0C\u5F53\u901A\u8FC7\u6784\u9020\u65B9\u6CD5\u4F20\u9012\u7684\u521D\u59CB\u5BB9\u91CF\u503C\u6BD4\u8BE5\u503C\u5927\uFF0C\u4F7F\u7528\u8BE5\u503C</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">MAXIMUM_CAPACITY</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The load factor used when none specified in constructor.</span></span>
<span class="line"><span style="color:#6A9955;">     * \u6784\u9020\u65B9\u6CD5\u672A\u6307\u5B9A\u65F6\u4F7F\u7528\u7684\u52A0\u8F7D\u56E0\u5B50</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">float</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">DEFAULT_LOAD_FACTOR</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0.75f</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The bin count threshold for using a tree rather than list for a</span></span>
<span class="line"><span style="color:#6A9955;">     * bin.  Bins are converted to trees when adding an element to a</span></span>
<span class="line"><span style="color:#6A9955;">     * bin with at least this many nodes. The value must be greater</span></span>
<span class="line"><span style="color:#6A9955;">     * than 2 and should be at least 8 to mesh with assumptions in</span></span>
<span class="line"><span style="color:#6A9955;">     * tree removal about conversion back to plain bins upon</span></span>
<span class="line"><span style="color:#6A9955;">     * shrinkage.</span></span>
<span class="line"><span style="color:#6A9955;">     * \u94FE\u8868\u8F6C\u7EA2\u9ED1\u6811\u7684\u9600\u503C</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">TREEIFY_THRESHOLD</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The bin count threshold for untreeifying a (split) bin during a</span></span>
<span class="line"><span style="color:#6A9955;">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span>
<span class="line"><span style="color:#6A9955;">     * most 6 to mesh with shrinkage detection under removal.</span></span>
<span class="line"><span style="color:#6A9955;">     * \u7EA2\u9ED1\u6811\u8F6C\u94FE\u8868\u7684\u9600\u503C</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">UNTREEIFY_THRESHOLD</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The smallest table capacity for which bins may be treeified.</span></span>
<span class="line"><span style="color:#6A9955;">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span>
<span class="line"><span style="color:#6A9955;">     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span>
<span class="line"><span style="color:#6A9955;">     * between resizing and treeification thresholds.</span></span>
<span class="line"><span style="color:#6A9955;">     * \u6700\u5C0F\u5316\u6811\u5F62\u5BB9\u91CF\u9608\u503C\uFF0C\u5F53\u54C8\u5E0C\u8868\u4E2D\u7684\u503C\u5927\u4E8E\u8BE5\u503C\u65F6\uFF0C\u624D\u5141\u8BB8\u94FE\u8868\u8F6C\u7EA2\u9ED1\u6811\uFF0C\u5426\u5219\u82E5\u5143\u7D20\u592A\u591A\u76F4\u63A5\u6269\u5BB9</span></span>
<span class="line"><span style="color:#6A9955;">     * \u4E3A\u907F\u514D\u6269\u5BB9\u548C\u6811\u5F62\u5316\u7684\u51B2\u7A81\uFF0C\u8FD9\u4E2A\u503C\u4E0D\u80FD\u5C0F\u4E8E4 * TREEIFY_THRESHOLD</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">MIN_TREEIFY_CAPACITY</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">64</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Basic hash bin node, used for most entries.  (See below for</span></span>
<span class="line"><span style="color:#6A9955;">     * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u91CD\u5199hashcode,equals </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Node</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map.Entry</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">hash</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Node</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">Node</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">hash</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Node</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hash</span><span style="color:#D4D4D4;"> = hash;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;"> = key;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = value;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">next</span><span style="color:#D4D4D4;"> = next;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getKey</span><span style="color:#D4D4D4;">()        { </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> key; }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getValue</span><span style="color:#D4D4D4;">()      { </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> value; }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">() { </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> key + </span><span style="color:#CE9178;">&quot;=&quot;</span><span style="color:#D4D4D4;"> + value; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">hashCode</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">//\u5BF9key \u548C value \u7684hashcode\u8FDB\u884C\u6309\u4F4D\u5F02\u6216</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Objects</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hashCode</span><span style="color:#D4D4D4;">(key) ^ </span><span style="color:#9CDCFE;">Objects</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hashCode</span><span style="color:#D4D4D4;">(value);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">setValue</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">newValue</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">oldValue</span><span style="color:#D4D4D4;"> = value;</span></span>
<span class="line"><span style="color:#D4D4D4;">            value = newValue;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> oldValue;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">equals</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (o == </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (o </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Map</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Entry</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Entry</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">Map</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Entry</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">,</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt;)o;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">Objects</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">equals</span><span style="color:#D4D4D4;">(key, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getKey</span><span style="color:#D4D4D4;">()) &amp;&amp;</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#9CDCFE;">Objects</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">equals</span><span style="color:#D4D4D4;">(value, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getValue</span><span style="color:#D4D4D4;">()))</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">/* ---------------- Static utilities -------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span>
<span class="line"><span style="color:#6A9955;">     * to lower.  Because the table uses power-of-two masking, sets of</span></span>
<span class="line"><span style="color:#6A9955;">     * hashes that vary only in bits above the current mask will</span></span>
<span class="line"><span style="color:#6A9955;">     * always collide. (Among known examples are sets of Float keys</span></span>
<span class="line"><span style="color:#6A9955;">     * holding consecutive whole numbers in small tables.)  So we</span></span>
<span class="line"><span style="color:#6A9955;">     * apply a transform that spreads the impact of higher bits</span></span>
<span class="line"><span style="color:#6A9955;">     * downward. There is a tradeoff between speed, utility, and</span></span>
<span class="line"><span style="color:#6A9955;">     * quality of bit-spreading. Because many common sets of hashes</span></span>
<span class="line"><span style="color:#6A9955;">     * are already reasonably distributed (so don&#39;t benefit from</span></span>
<span class="line"><span style="color:#6A9955;">     * spreading), and because we use trees to handle large sets of</span></span>
<span class="line"><span style="color:#6A9955;">     * collisions in bins, we just XOR some shifted bits in the</span></span>
<span class="line"><span style="color:#6A9955;">     * cheapest possible way to reduce systematic lossage, as well as</span></span>
<span class="line"><span style="color:#6A9955;">     * to incorporate impact of the highest bits that would otherwise</span></span>
<span class="line"><span style="color:#6A9955;">     * never be used in index calculations because of table bounds.</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">hash</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> key) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">h</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (key == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> (h = </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hashCode</span><span style="color:#D4D4D4;">()) ^ (h &gt;&gt;&gt; </span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Returns x&#39;s Class if it is of the form &quot;class C implements</span></span>
<span class="line"><span style="color:#6A9955;">     * Comparable&lt;C&gt;&quot;, else null.</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Class</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">comparableClassFor</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> x) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (x </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> Comparable) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">Class</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">; </span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">ts</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">as</span><span style="color:#D4D4D4;">; </span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">; </span><span style="color:#4EC9B0;">ParameterizedType</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> ((c = </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getClass</span><span style="color:#D4D4D4;">()) == </span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// bypass checks</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> c;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> ((ts = </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getGenericInterfaces</span><span style="color:#D4D4D4;">()) != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">ts</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (((t = ts[i]) </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> ParameterizedType) &amp;&amp;</span></span>
<span class="line"><span style="color:#D4D4D4;">                        ((p = (ParameterizedType)t).</span><span style="color:#DCDCAA;">getRawType</span><span style="color:#D4D4D4;">() ==</span></span>
<span class="line"><span style="color:#D4D4D4;">                         </span><span style="color:#9CDCFE;">Comparable</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">) &amp;&amp;</span></span>
<span class="line"><span style="color:#D4D4D4;">                        (as = </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getActualTypeArguments</span><span style="color:#D4D4D4;">()) != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#9CDCFE;">as</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &amp;&amp; as[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] == c) </span><span style="color:#6A9955;">// type arg is c</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> c;</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Returns k.compareTo(x) if x matches kc (k&#39;s screened comparable</span></span>
<span class="line"><span style="color:#6A9955;">     * class), else 0.</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">SuppressWarnings</span><span style="color:#D4D4D4;">({</span><span style="color:#CE9178;">&quot;rawtypes&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;unchecked&quot;</span><span style="color:#D4D4D4;">}) </span><span style="color:#6A9955;">// for cast to Comparable</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">compareComparables</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Class</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt; kc, </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> k, </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> x) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (x == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getClass</span><span style="color:#D4D4D4;">() != kc </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                ((Comparable)k).</span><span style="color:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;">(x));</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Returns a power of two size for the given target capacity.</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">tableSizeFor</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> cap) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = cap - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        n |= n &gt;&gt;&gt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        n |= n &gt;&gt;&gt; </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        n |= n &gt;&gt;&gt; </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        n |= n &gt;&gt;&gt; </span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        n |= n &gt;&gt;&gt; </span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (n &lt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> (n &gt;= MAXIMUM_CAPACITY) </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> MAXIMUM_CAPACITY </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> n + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">/* ---------------- Fields -------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The table, initialized on first use, and resized as</span></span>
<span class="line"><span style="color:#6A9955;">     * necessary. When allocated, length is always a power of two.</span></span>
<span class="line"><span style="color:#6A9955;">     * (We also tolerate length zero in some operations to allow</span></span>
<span class="line"><span style="color:#6A9955;">     * bootstrapping mechanics that are currently not needed.)</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">transient</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Node</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;">&gt;[] </span><span style="color:#9CDCFE;">table</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Holds cached entrySet(). Note that AbstractMap fields are used</span></span>
<span class="line"><span style="color:#6A9955;">     * for keySet() and values().</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">transient</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Entry</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">V</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">entrySet</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The number of key-value mappings contained in this map.</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">transient</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The number of times this HashMap has been structurally modified</span></span>
<span class="line"><span style="color:#6A9955;">     * Structural modifications are those that change the number of mappings in</span></span>
<span class="line"><span style="color:#6A9955;">     * the HashMap or otherwise modify its internal structure (e.g.,</span></span>
<span class="line"><span style="color:#6A9955;">     * rehash).  This field is used to make iterators on Collection-views of</span></span>
<span class="line"><span style="color:#6A9955;">     * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">transient</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">modCount</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The next size value at which to resize (capacity * load factor).</span></span>
<span class="line"><span style="color:#6A9955;">     *</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@serial</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// (The javadoc description is true upon serialization.</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Additionally, if the table array has not been allocated, this</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// field holds the initial array capacity, or zero signifying</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// DEFAULT_INITIAL_CAPACITY.)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">threshold</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * The load factor for the hash table.</span></span>
<span class="line"><span style="color:#6A9955;">     *</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@serial</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">float</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">loadFactor</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u6784\u9020\u65B9\u6CD5</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"> /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Constructs an empty list with the specified initial capacity.</span></span>
<span class="line"><span style="color:#6A9955;">     * </span></span>
<span class="line"><span style="color:#6A9955;">     * \u5E26\u6709\u521D\u59CB\u5BB9\u91CF\u7684\u6784\u9020\u51FD\u6570</span></span>
<span class="line"><span style="color:#6A9955;">     *</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;">  </span><span style="color:#9CDCFE;">initialCapacity</span><span style="color:#6A9955;">  the initial capacity of the list</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@throws</span><span style="color:#6A9955;"> </span><span style="color:#4EC9B0;">IllegalArgumentException</span><span style="color:#6A9955;"> if the specified initial capacity</span></span>
<span class="line"><span style="color:#6A9955;">     *         is negative</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ArrayList</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> initialCapacity) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (initialCapacity &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) { </span><span style="color:#6A9955;">//\u521D\u59CB\u5BB9\u91CF\u5927\u4E8E0\uFF0C\u5B9E\u4F8B\u4E00\u4E2A\u65B0\u5BF9\u8C61\u6570\u7EC4</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">[initialCapacity];</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (initialCapacity == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) { </span><span style="color:#6A9955;">//\u521D\u59CB\u5BB9\u91CF\u7B49\u4E8E0\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u7A7A\u5BF9\u8C61\u6570\u7EC4</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;"> = EMPTY_ELEMENTDATA;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">//\u521D\u59CB\u5BB9\u91CF\u5C0F\u4E8E0\uFF0C\u63D0\u793A\u5F02\u5E38\uFF0C\u53C2\u6570\u4E0D\u5408\u6CD5</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">IllegalArgumentException</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Illegal Capacity: &quot;</span><span style="color:#D4D4D4;">+</span></span>
<span class="line"><span style="color:#D4D4D4;">                                               initialCapacity);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Constructs an empty list with an initial capacity of ten.</span></span>
<span class="line"><span style="color:#6A9955;">     * \u4F7F\u7528\u9ED8\u8BA4\u6784\u9020\u5BB9\u91CF\uFF0C\u6784\u5EFAArrayList\u5BF9\u8C61\uFF0C\u5E76\u4E14\u5728\u6DFB\u52A0\u7B2C\u4E00\u4E2A\u5143\u7D20\u65F6\uFF0C\u5C31\u4F1A\u8BBE\u7F6E\u6269\u5BB9\u91CF\u4E3A\u9ED8\u8BA4\u7684\u6269\u5BB9\u91CF</span></span>
<span class="line"><span style="color:#6A9955;">     * </span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ArrayList</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;"> = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * Constructs a list containing the elements of the specified</span></span>
<span class="line"><span style="color:#6A9955;">     * collection, in the order they are returned by the collection&#39;s</span></span>
<span class="line"><span style="color:#6A9955;">     * iterator.</span></span>
<span class="line"><span style="color:#6A9955;">     *</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">c</span><span style="color:#6A9955;"> the collection whose elements are to be placed into this list</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@throws</span><span style="color:#6A9955;"> </span><span style="color:#4EC9B0;">NullPointerException</span><span style="color:#6A9955;"> if the specified collection is null</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ArrayList</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Collection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> extends E&gt; c) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">//\u96C6\u5408\u8F6C\u6210\u5BF9\u8C61\u6570\u7EC4</span></span>
<span class="line"><span style="color:#D4D4D4;">        elementData = </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toArray</span><span style="color:#D4D4D4;">(); </span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> ((size = </span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) != </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">//\u5982\u679C\u96C6\u5408\u4E2D\u5B58\u5728\u5143\u7D20</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">//\u8F6C\u6362\u7684\u6570\u7EC4\u5BF9\u8C61\u662F\u4E0D\u662FObject\u7C7B\u578B\u7684</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getClass</span><span style="color:#D4D4D4;">() != </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">[].</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">                elementData = </span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">copyOf</span><span style="color:#D4D4D4;">(elementData, size, </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">[].</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">//\u5C06\u96C6\u5408\u5143\u7D20\u8F6C\u6210Object\u7C7B\u578B</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">             </span><span style="color:#6A9955;">//\u5982\u679C\u96C6\u5408\u4E2D\u4E0D\u5B58\u5728\u5143\u7D20</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// replace with empty array.</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;"> = EMPTY_ELEMENTDATA;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u65B9\u6CD5</p><p><strong>add(e)</strong>\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">E</span><span style="color:#D4D4D4;"> e) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u786E\u8BA4\u5BB9\u91CF</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">ensureCapacityInternal</span><span style="color:#D4D4D4;">(size + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// Increments modCount!!</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u76F4\u63A5\u5C06\u5143\u7D20\u6DFB\u52A0\u5728\u6570\u7EC4\u4E2D</span></span>
<span class="line"><span style="color:#D4D4D4;">        elementData[size++] = e;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ensureCapacityInternal</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> minCapacity) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u8FDB\u4E00\u6B65\u786E\u8BA4ArrayList\u7684\u5BB9\u91CF\uFF0C\u770B\u662F\u5426\u9700\u8981\u8FDB\u884C\u6269\u5BB9</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">ensureExplicitCapacity</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">calculateCapacity</span><span style="color:#D4D4D4;">(elementData, minCapacity));</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">calculateCapacity</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">[] elementData, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> minCapacity) {</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#6A9955;">// \u5982\u679CelementData\u4E3A\u7A7A\uFF0C\u5219\u8FD4\u56DE\u9ED8\u8BA4\u5BB9\u91CF\u548CminCapacity\u4E2D\u7684\u6700\u5927\u503C</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(DEFAULT_CAPACITY, minCapacity);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5426\u5219\u76F4\u63A5\u8FD4\u56DEminCapacity</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> minCapacity;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ensureExplicitCapacity</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> minCapacity) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u4FEE\u6539\u6B21\u6570\u81EA\u589E</span></span>
<span class="line"><span style="color:#D4D4D4;">        modCount++;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// overflow-conscious code</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u5224\u65AD\u662F\u5426\u9700\u8981\u6269\u5BB9,\u53CC\u91CD\u6821\u9A8C\uFF0C\u9632\u6B62\u6570\u7EC4\u4E0B\u8868\u8D8A\u754C</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (minCapacity - </span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#DCDCAA;">grow</span><span style="color:#D4D4D4;">(minCapacity);</span></span>
<span class="line"><span style="color:#D4D4D4;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">grow</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> minCapacity) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// overflow-conscious code</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u539F\u5BB9\u91CF</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">oldCapacity</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u6269\u5BB9\uFF0C\u76F8\u5F53\u4E8E\u6269\u5927\u4E3A\u539F\u6765\u76841.5\u500D</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">newCapacity</span><span style="color:#D4D4D4;"> = oldCapacity + (oldCapacity &gt;&gt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u786E\u8BA4\u6700\u7EC8\u5BB9\u91CF</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (newCapacity - minCapacity &lt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        newCapacity = minCapacity;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (newCapacity - MAX_ARRAY_SIZE &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        newCapacity = </span><span style="color:#DCDCAA;">hugeCapacity</span><span style="color:#D4D4D4;">(minCapacity);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// minCapacity is usually close to size, so this is a win:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5C06\u65E7\u6570\u636E\u62F7\u8D1D\u5230\u65B0\u6570\u7EC4\u4E2D</span></span>
<span class="line"><span style="color:#D4D4D4;">    elementData = </span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">copyOf</span><span style="color:#D4D4D4;">(elementData, newCapacity);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5206\u6790\uFF1A\u89E6\u53D1\u6269\u5BB9\u7684\u6761\u4EF6\uFF0C\u5982\u679C\u6DFB\u52A0\u7684\u5143\u7D20\u6BD4\u5F53\u524D\u7684\u6570\u7EC4\u591A\uFF0C\u5C31\u4F1A\u89E6\u53D1\u6269\u5BB9\u3002\u56E0\u6B64\u5728\u5FAA\u73AF\u4E2D\u4F7F\u7528\u65F6\uFF0C\u907F\u514D\u91CD\u590D\u6269\u5BB9\u9020\u6210OOM\u5F02\u5E38\u3002</p><p>\u5EFA\u8BAE\uFF1A\u521D\u59CB\u5316\u7684\u65F6\u5019\u5C31\u8BBE\u7F6E\u597D\u6269\u5BB9\u91CF\uFF0C\u53EF\u4EE5\u907F\u514DOOM\u5F02\u5E38\u3002</p><p><strong>add(int index, E element)</strong>\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> index, </span><span style="color:#4EC9B0;">E</span><span style="color:#D4D4D4;"> element) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u8D8A\u754C\u68C0\u67E5</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">rangeCheckForAdd</span><span style="color:#D4D4D4;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u786E\u8BA4\u5BB9\u91CF</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">ensureCapacityInternal</span><span style="color:#D4D4D4;">(size + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// Increments modCount!!</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u5C06index\u53CA\u5176\u4E4B\u540E\u7684\u5143\u7D20\u5F80\u540E\u79FB\u52A8\u4E00\u4F4D\uFF0C\u5C06index\u4F4D\u7F6E\u7A7A\u51FA\u6765</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arraycopy</span><span style="color:#D4D4D4;">(elementData, index, elementData, index + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                         size - index);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u5728index\u63D2\u5165\u5143\u7D20</span></span>
<span class="line"><span style="color:#D4D4D4;">        elementData[index] = element;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u5143\u7D20\u4E2A\u6570\u81EA\u589E</span></span>
<span class="line"><span style="color:#D4D4D4;">        size++;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>get(index)</strong>:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">E</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> index) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u8D8A\u754C\u68C0\u67E5</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">rangeCheck</span><span style="color:#D4D4D4;">(index);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u83B7\u53D6\u5BF9\u5E94\u4F4D\u7F6E\u4E0A\u7684\u6570\u636E</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">elementData</span><span style="color:#D4D4D4;">(index);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">rangeCheck</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> index) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (index &gt;= size)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">IndexOutOfBoundsException</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">outOfBoundsMsg</span><span style="color:#D4D4D4;">(index));</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">E</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">elementData</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> index) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (E) elementData[index];</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>remove(index)</strong>:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">E</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">remove</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> index) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u8D8A\u754C\u68C0\u67E5</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">rangeCheck</span><span style="color:#D4D4D4;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u4FEE\u6539\u6B21\u6570\u81EA\u589E</span></span>
<span class="line"><span style="color:#D4D4D4;">    modCount++;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u83B7\u53D6\u5BF9\u5E94index\u4E0A\u7684\u5143\u7D20</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">E</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">oldValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">elementData</span><span style="color:#D4D4D4;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5224\u65ADindex\u662F\u5426\u5728\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">numMoved</span><span style="color:#D4D4D4;"> = size - index - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5982\u679C\u4E0D\u662F\uFF0C\u5219\u9700\u8981\u5C06index\u4E4B\u540E\u7684\u5143\u7D20\u5F80\u524D\u79FB\u52A8\u4E00\u4F4D</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (numMoved &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arraycopy</span><span style="color:#D4D4D4;">(elementData, index+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, elementData, index,</span></span>
<span class="line"><span style="color:#D4D4D4;">                         numMoved);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5C06\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u5220\u9664\uFF0C\u5E2E\u52A9GC</span></span>
<span class="line"><span style="color:#D4D4D4;">    elementData[--size] = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// clear to let GC do its work</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> oldValue;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>remove(o)</strong>:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">remove</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> o) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5982\u679C\u88AB\u79FB\u9664\u5143\u7D20\u4E3Anull</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (o == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u5FAA\u73AF\u904D\u5386</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; index &lt; size; index++)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// \u6CE8\u610F\u8FD9\u91CC\u5224\u65ADnull\u662F\u7528\u7684\u201C==\u201D</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (elementData[index] == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#6A9955;">// \u5FEB\u901Fremove\u5143\u7D20</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#DCDCAA;">fastRemove</span><span style="color:#D4D4D4;">(index);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; index &lt; size; index++)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// \u8FD9\u91CC\u5224\u65AD\u76F8\u7B49\u662F\u7528\u7684equals\u65B9\u6CD5\uFF0C\u6CE8\u610F\u548C\u4E0A\u9762\u5BF9\u6BD4</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">equals</span><span style="color:#D4D4D4;">(elementData[index])) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#DCDCAA;">fastRemove</span><span style="color:#D4D4D4;">(index);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fastRemove</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> index) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u6CE8\u610F\u8FD9\u91CC\u5E76\u672A\u505A\u8D8A\u754C\u68C0\u67E5\uFF0C\u6BD5\u7ADF\u53EBfastRemove</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u4FEE\u6539\u6B21\u6570\u81EA\u589E</span></span>
<span class="line"><span style="color:#D4D4D4;">    modCount++;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5224\u65AD\u662F\u5426\u662F\u6700\u540E\u4E00\u4E2A\u5143\u7D20\uFF0C\u8FD9\u91CC\u7684\u64CD\u4F5C\u548Cremove(index)\u662F\u4E00\u6837\u7684</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">numMoved</span><span style="color:#D4D4D4;"> = size - index - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (numMoved &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arraycopy</span><span style="color:#D4D4D4;">(elementData, index+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, elementData, index,</span></span>
<span class="line"><span style="color:#D4D4D4;">                         numMoved);</span></span>
<span class="line"><span style="color:#D4D4D4;">    elementData[--size] = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// clear to let GC do its work</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>addAll(c)</strong>:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">addAll</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Collection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> extends E&gt; c) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toArray</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">numNew</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">//\u786E\u8BA4\u6269\u5BB9\u7684\u5927\u5C0F\uFF0C\u5E76\u8FDB\u884C\u6570\u7EC4\u7684\u6269\u5BB9</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">ensureCapacityInternal</span><span style="color:#D4D4D4;">(size + numNew);  </span><span style="color:#6A9955;">// Increments modCount</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">//\u5C06\u5143\u7D20\u8FFD\u52A0\u5230\u6700\u540E</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arraycopy</span><span style="color:#D4D4D4;">(a, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, elementData, size, numNew);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">//\u8D4B\u503C\u6700\u65B0\u7684\u5143\u7D20\u957F\u5EA6</span></span>
<span class="line"><span style="color:#D4D4D4;">        size += numNew;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> numNew != </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5206\u6790\uFF1AaddAll \u6C42\u5E76\u96C6\uFF0C\u548Cadd(e) \u65B9\u6CD5\u7C7B\u4F3C\u3002</p><p><strong>retainAll(c)</strong>:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">retainAll</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Collection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt; c) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u5224\u7A7A</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">Objects</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">requireNonNull</span><span style="color:#D4D4D4;">(c);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// \u6279\u91CFremove complement\u4E3Atrue\u8868\u793A\u4FDD\u5B58\u5305\u542B\u5728c\u96C6\u5408\u7684\u5143\u7D20\uFF0C\u8FD9\u6837\u5C31\u6C42\u51FA\u4EA4\u96C6\u4E86</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">batchRemove</span><span style="color:#D4D4D4;">(c, </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">batchRemove</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Collection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt; c, </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> complement) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">elementData</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// \u8BFB\u5199\u6307\u9488 \u8BFB\u6307\u9488\u904D\u5386\uFF0C\u5199\u6307\u9488\u53EA\u6709\u5728\u6761\u4EF6\u7B26\u5408\u65F6\u624D\u81EA\u589E\uFF0C\u8FD9\u6837\u4E0D\u9700\u8981\u989D\u5916\u7684\u7A7A\u95F4</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, w = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">modified</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// \u904D\u5386</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (; r &lt; size; r++)</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#6A9955;">// \u5982\u679Cc\u96C6\u5408\u4E2D\u5305\u542B\u904D\u5386\u5143\u7D20\uFF0C\u5219\u628A\u5143\u7D20\u653E\u5165\u5199\u6307\u9488\u4F4D\u7F6E(\u4EE5complement\u4E3A\u51C6)</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(elementData[r]) == complement)</span></span>
<span class="line"><span style="color:#D4D4D4;">                    elementData[w++] = elementData[r];</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// Preserve behavioral compatibility with AbstractCollection,</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// even if c.contains() throws.</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// \u6B63\u5E38\u60C5\u51B5\u4E0B\uFF0Cr\u4E0Esize\u662F\u76F8\u7B49\u7684\uFF0C\u8FD9\u91CC\u662F\u5BF9\u5F02\u5E38\u7684\u5224\u65AD</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (r != size) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#6A9955;">// \u5C06\u672A\u8BFB\u7684\u5143\u7D20\u62F7\u8D1D\u5230\u5199\u6307\u9488\u540E\u9762</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arraycopy</span><span style="color:#D4D4D4;">(elementData, r,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 elementData, w,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 size - r);</span></span>
<span class="line"><span style="color:#D4D4D4;">                w += size - r;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// \u5C06\u5199\u6307\u9488\u540E\u7684\u5143\u7D20\u5168\u90E8\u7F6E\u7A7A</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (w != size) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#6A9955;">// clear to let GC do its work</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = w; i &lt; size; i++)</span></span>
<span class="line"><span style="color:#D4D4D4;">                    elementData[i] = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">                modCount += size - w;</span></span>
<span class="line"><span style="color:#D4D4D4;">                size = w;</span></span>
<span class="line"><span style="color:#D4D4D4;">                modified = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> modified;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5206\u6790\uFF1AretainAll \u6C42\u4EA4\u96C6\uFF0C\u4F7F\u7528\u8BFB\u5199\u6307\u9488\u8FDB\u884C\u64CD\u4F5C\uFF0C\u4E0D\u5360\u7528\u989D\u5916\u7A7A\u95F4\uFF1B\u5E76\u4E14\u4F7F\u7528finally \u5904\u7406\u5F02\u5E38\u548C\u7F6E\u7A7A\u60C5\u51B5\u3002</p><p><strong>removeAll(c)</strong>:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">removeAll</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Collection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt; c) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">Objects</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">requireNonNull</span><span style="color:#D4D4D4;">(c);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">batchRemove</span><span style="color:#D4D4D4;">(c, </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">//complement=false,  \u4FDD\u7559\u4E0D\u5728c\u5BB9\u5668\u79CD\u7684\u5143\u7D20</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5206\u6790\uFF1AremoveAll\u6C42\u5DEE\u96C6\uFF0C\u662F\u5355\u5411\u5DEE\u96C6\uFF0C\u8FD4\u56DE\u96C6\u5408 <strong>c</strong> \u4E2D\u6CA1\u6709\u7684\u5143\u7D20\u3002</p></li></ul><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><ol><li>ArrayList\u5185\u90E8\u4F7F\u7528\u6570\u7EC4\u5B58\u50A8\u5143\u7D20(\u8FDE\u7EED\u7684\u5185\u5B58\u7A7A\u95F4)\uFF0C\u9ED8\u8BA4\u5BB9\u91CF\u662F10\uFF0C\u5E76\u4E14\u652F\u6301\u5B58\u50A8null\u503C\uFF1B</li><li>ArrayList\u6DFB\u52A0\u7684\u5143\u7D20\u957F\u5EA6\u5927\u4E8E\u5F53\u524D\u957F\u5EA6\u65F6\uFF0C\u4F1A\u8FDB\u884C1.5\u500D\u7684\u6269\u5BB9(\u4E0D\u4F1A\u7F29\u5BB9)\uFF1B</li><li>ArrayList\u652F\u6301\u968F\u673A\u8BBF\u95EE\uFF0C\u901A\u8FC7\u7D22\u5F15\u8BBF\u95EE\u5143\u7D20\u6781\u5FEB\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(1);</li><li>ArrayList\u5728\u5C3E\u90E8\u6DFB\u52A0/\u5220\u9664\u5143\u7D20\u6781\u5FEB\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(1);</li><li>ArrayList\u5728\u4E2D\u95F4\u6DFB\u52A0/\u5220\u9664\u5143\u7D20\u6BD4\u8F83\u6162\uFF0C\u56E0\u4E3A\u8981\u8FDB\u884C\u5143\u7D20\u7684\u79FB\u52A8\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n);</li><li>ArrayList\u652F\u6301\u5E76\u96C6\uFF0C\u4EA4\u96C6\u548C\u5355\u5411\u5DEE\u96C6\u3002</li></ol>`,12),c=[o];function D(i,r){return n(),a("div",null,c)}var y=s(e,[["render",D],["__file","HashMap.html.vue"]]);export{y as default};
